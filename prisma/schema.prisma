// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // You can change this to another provider if needed
  url      = env("DATABASE_URL")
}

model Card {
  id              String   @id @default(uuid())
  oracleId        String   @map("oracle_id")
  multiverseIds   Json     @map("multiverse_ids") // Using Json for array
  mtgoId          Int?     @map("mtgo_id")
  tcgplayerId     Int?     @map("tcgplayer_id")
  cardmarketId    Int?     @map("cardmarket_id")
  name            String
  lang            String
  releasedAt      DateTime @map("released_at")
  uri             String
  scryfallUri     String   @map("scryfall_uri")
  layout          String
  highresImage    Boolean  @map("highres_image")
  imageStatus     String   @map("image_status")
  
  // Image URIs - Stored as JSON
  imageUris       Json?    @map("image_uris")
  
  manaCost        String?  @map("mana_cost")
  cmc             Float
  typeLine        String   @map("type_line")
  oracleText      String?  @map("oracle_text")
  power           String?
  toughness       String?
  colors          Json     @default("[]") // Using Json for array
  colorIdentity   Json     @default("[]") @map("color_identity") // Using Json for array
  keywords        Json     @default("[]") // Using Json for array
  
  // JSON fields for complex nested structures
  allParts        Json?    @map("all_parts")
  legalities      Json     
  games           Json     @default("[]") // Using Json for array
  
  reserved        Boolean
  gameChanger     Boolean  @map("game_changer")
  foil            Boolean
  nonfoil         Boolean
  finishes        Json     @default("[]") // Using Json for array
  oversized       Boolean
  promo           Boolean
  reprint         Boolean
  variation       Boolean
  
  setId           String   @map("set_id")
  set             String
  setName         String   @map("set_name")
  setType         String   @map("set_type")
  setUri          String   @map("set_uri")
  setSearchUri    String   @map("set_search_uri")
  scryfallSetUri  String   @map("scryfall_set_uri")
  rulingsUri      String   @map("rulings_uri")
  printsSearchUri String   @map("prints_search_uri")
  
  collectorNumber String   @map("collector_number")
  digital         Boolean
  rarity          String
  watermark       String?
  flavorText      String?  @map("flavor_text")
  cardBackId      String   @map("card_back_id")
  
  artist          String
  artistIds       Json     @default("[]") @map("artist_ids") // Using Json for array
  illustrationId  String?  @map("illustration_id")
  borderColor     String   @map("border_color")
  frame           String
  frameEffects    Json     @default("[]") @map("frame_effects") // Using Json for array
  securityStamp   String?  @map("security_stamp")
  
  fullArt         Boolean  @map("full_art")
  textless        Boolean
  booster         Boolean
  storySpotlight  Boolean  @map("story_spotlight")
  edhrecRank      Int?     @map("edhrec_rank")
  
  // Store preview, prices and related URIs as JSON
  preview         Json?
  prices          Json
  relatedUris     Json     @map("related_uris")
  purchaseUris    Json     @map("purchase_uris")

  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationship with Deck
  deckCards       DeckCard[]

  @@map("cards")
}

// Adding a basic Deck model that addresses the error you mentioned
model Deck {
  id              String   @id @default(uuid())
  name            String
  description     String?
  format          String?
  
  // Using Json for array fields
  colors          Json     @default("[]")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationship with Card
  deckCards       DeckCard[]

  imageUrl    String?    // Added this field


  @@map("decks")
}

// Join table for many-to-many relationship
model DeckCard {
  id        String   @id @default(uuid())
  deckId    String
  cardId    String
  quantity  Int      @default(1)
  
  // Relations
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([deckId, cardId])
  @@map("deck_cards")
}
